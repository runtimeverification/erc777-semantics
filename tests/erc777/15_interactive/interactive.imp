test.preamble();

// Interactive program
int continueLoop;
continueLoop = 1;
while (continueLoop == 1) {
  print("--------------------------------\n");
  print("Caller: "); print(caller); print("\n");
  print("--------------------------------\n");
  print(" 1 : totalSupply()\n");
  print(" 2 : balanceOf(Id)\n");
  print(" 3 : defaultOperators()\n");
  print(" 4 : authorizeOperator(Operator)\n");
  print(" 5 : revokeOperator(Operator)\n");
  print(" 6 : isOperatorFor(Operator,Address)\n");
  print(" 7 : send(To,Value,\"\")\n");
  print(" 8 : operatorSend(From,To,Value,\"\",\"\")\n");
  print(" 9 : burn(Value)\n");
  print(" 10 : operatorBurn(From,Value,\"\")\n");
  print(" 11 : operatorMint(From,Value,\"\",\"\") (custom function)\n");
  print("--------------------------------\n");
  print(" 0 : EXIT\n");
  print("-2 : makeCaller(Id)\n")
  print("--------------------------------\n");
  print("Command: ");
  c = read();
  print("\n\n\n\n\n\n\n");
  if (c == -2) { test.makeCaller(read()); }
  if (c == 0 ) { continueLoop = 0; }
  if (c == 1 ) { test.totalSupply(); }
  if (c == 2 ) { test.balanceOf(read()); }
  if (c == 3 ) { test.defaultOperators(); }
  if (c == 4 ) { test.authorizeOperator(read()); }
  if (c == 5 ) { test.revokeOperator(read()); }
  if (c == 6 ) { test.isOperatorFor(read(), read()); }
  if (c == 7 ) { test.send(read(), read(), ""); }
  if (c == 8 ) { test.operatorSend(read(), read(), read(), "", ""); }
  if (c == 9 ) { test.burn(read()); }
  if (c == 10 ) { test.operatorBurn(read(), read(), ""); }
  if (c == 11 ) { test.operatorMint(read(), read(), "", ""); }
}
